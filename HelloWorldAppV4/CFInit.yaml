---
AWSTemplateFormatVersion: 2010-09-09
Description: Sample CF template that generates an auto scaling stack that hosts a very basic hello world webpage, pulling files from a secured S3 Bucket.
Parameters:
  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  BuildNumber:
    Description: The build number of our web app
    Type: String
  S3StackName:
    Description: Name of S3 Stack
    Type: String

Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-1853ac65
    us-west-1:
      AMI: ami-bf5540df
    eu-west-1:
      AMI: ami-3bfab942
    ap-southeast-1:
      AMI: ami-e2adf99e
    ap-southeast-2:
      AMI: ami-43874721

Resources:

  LCInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - ec2.amazonaws.com
      Policies:
        - PolicyName: EC2S3Perms
          PolicyDocument:
            Statement:
              Effect: Allow
              Action: s3:GetObject
              Resource:
                Fn::Sub:
                  - arn:aws:s3:::${bucketName}/*
                  - bucketName:
                      Fn::ImportValue:
                        !Sub ${S3StackName}-s3Bucket

  LCInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: LCInstanceRole

  ElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      AvailabilityZones:
        Fn::GetAZs: ''
      CrossZone: 'true'
      Listeners:
      - LoadBalancerPort: '80'
        InstancePort: '80'
        Protocol: HTTP
      HealthCheck:
        Target: HTTP:80/
        HealthyThreshold: '3'
        UnhealthyThreshold: '5'
        Interval: '30'
        Timeout: '5'

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access and HTTP from the load balancer only
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        SourceSecurityGroupOwnerId:
          Fn::GetAtt:
          - ElasticLoadBalancer
          - SourceSecurityGroup.OwnerAlias
        SourceSecurityGroupName:
          Fn::GetAtt:
          - ElasticLoadBalancer
          - SourceSecurityGroup.GroupName

  WebServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones:
        Fn::GetAZs: ''
      LaunchConfigurationName:
        Ref: LaunchConfig
      MinSize: '2'
      MaxSize: '4'
      LoadBalancerNames:
      - Ref: ElasticLoadBalancer
      HealthCheckType: ELB
      HealthCheckGracePeriod: 1800
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
        Count: 2
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: '1'
        MaxBatchSize: '1'
        PauseTime: PT15M
        SuspendProcesses:
          - HealthCheck
          - ReplaceUnhealthy
          - AZRebalance
          - AlarmNotification
          - ScheduledActions
        WaitOnResourceSignals: 'true'

  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Authentication:
        S3AccessCreds:
          type: S3
          roleName: !Ref LCInstanceRole
          buckets:
            -
              Fn::ImportValue:
                  !Sub "${S3StackName}-s3Bucket"
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              httpd: []
          files:
            /var/www/html/index.html:
              source:
                Fn::Sub:
                  - https://s3.amazonaws.com/${bucketName}/index.html
                  - bucketName:
                      Fn::ImportValue:
                        !Sub "${S3StackName}-s3Bucket"
            /var/www/html/styles.css:
              source:
                Fn::Sub:
                  - https://s3.amazonaws.com/${bucketName}/styles.css
                  - bucketName:
                      Fn::ImportValue:
                        !Sub "${S3StackName}-s3Bucket"
            /var/www/html/script.js:
              source:
                Fn::Sub:
                  - https://s3.amazonaws.com/${bucketName}/script.js
                  - bucketName:
                      Fn::ImportValue:
                        !Sub "${S3StackName}-s3Bucket"
          services:
            sysvinit:
              httpd:
                enabled: 'true'
                ensureRunning: 'true'
    Properties:
      LaunchConfigurationName:
        Fn::Sub:
          - build${buildNumber}
          - buildNumber:
              !Ref BuildNumber
      IamInstanceProfile: !Ref LCInstanceProfile
      KeyName:
        Ref: KeyName
      ImageId:
        Fn::FindInMap:
        - RegionMap
        - !Ref AWS::Region
        - AMI
      SecurityGroups:
      - Ref: InstanceSecurityGroup
      InstanceType: t2.micro
      UserData:
        'Fn::Base64':
          !Sub |
            #!/bin/bash -xe
            yum update -y aws-cfn-bootstrap
            # Install the files and packages from the metadata
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfig --region ${AWS::Region}
            # Signal completion of the above
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WebServerGroup --region ${AWS::Region}
            # Update index.html with the current build number
            sed -i -e 's/<BuildNumber>/${BuildNumber}/' /var/www/html/index.html

Outputs:
  URL:
    Description: The URL of the website
    Value:
      Fn::Join:
      - ''
      - - http://
        - Fn::GetAtt:
          - ElasticLoadBalancer
          - DNSName